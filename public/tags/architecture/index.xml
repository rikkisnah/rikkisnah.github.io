<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on Rik Kisnah - Blog</title>
    <link>https://rikkisnah.github.io/tags/architecture/</link>
    <description>Recent content in Architecture on Rik Kisnah - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 10 May 2003 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://rikkisnah.github.io/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>iPod Integration: The Modular Approach</title>
      <link>https://rikkisnah.github.io/posts/ipod-integration-ideas-may-2003/</link>
      <pubDate>Sat, 10 May 2003 00:00:00 +0000</pubDate>
      <guid>https://rikkisnah.github.io/posts/ipod-integration-ideas-may-2003/</guid>
      <description>The Modular Breakthrough By May 2003, we&amp;rsquo;d learned key lessons from years of iPod integration attempts. The breakthrough was realizing that we didn&amp;rsquo;t need one mega-system. We needed modular components that could work together or independently.&#xA;Theorizing Solutions I spent weeks theorizing solutionsâ€”not just coding, but thinking deeply about architecture. The key insight: separate concerns cleanly.&#xA;Music storage: Handle compression, storage, indexing separately Playback: Decode and output audio independently Synchronization: Handle data sync as a distinct service UI: Present a clean interface without coupling to storage or playback The Data Floods The data floods we faced weren&amp;rsquo;t just network bandwidth.</description>
    </item>
  </channel>
</rss>
