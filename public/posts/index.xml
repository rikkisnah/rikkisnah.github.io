<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Rik Kisnah - Blog</title>
    <link>https://rikkisnah.github.io/posts/</link>
    <description>Recent content in Posts on Rik Kisnah - Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 18 Oct 2025 09:00:00 -0700</lastBuildDate>
    <atom:link href="https://rikkisnah.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Oracle AI World 2025: Enterprise AI from Promise to Production</title>
      <link>https://rikkisnah.github.io/posts/oracle-ai-world-2025/</link>
      <pubDate>Sat, 18 Oct 2025 09:00:00 -0700</pubDate>
      <guid>https://rikkisnah.github.io/posts/oracle-ai-world-2025/</guid>
      <description>&lt;h2 id=&#34;the-ai-inflection-point&#34;&gt;The AI Inflection Point&lt;/h2&gt;&#xA;&lt;p&gt;At Oracle AI World 2025, a clear message emerged: AI isn&amp;rsquo;t just another technology trend—it&amp;rsquo;s the bridge between decades of enterprise data and the future of business innovation.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;unlocking-enterprise-datas-true-potential&#34;&gt;Unlocking Enterprise Data&amp;rsquo;s True Potential&lt;/h3&gt;&#xA;&lt;p&gt;Oracle founder Larry Ellison framed the opportunity succinctly: &lt;strong&gt;&amp;ldquo;AI offers the highest-value technology we have ever seen so far.&amp;rdquo;&lt;/strong&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; The critical insight? Most AI models train on internet data, missing the real competitive advantage: enterprise databases containing mission-critical business information.&lt;sup id=&#34;fnref1:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mauritius Summer Holidays 2025 - Three Weeks of Family, Legacy, and New Beginnings</title>
      <link>https://rikkisnah.github.io/posts/mauritius-summer-holidays-2025/</link>
      <pubDate>Fri, 15 Aug 2025 10:00:00 -0700</pubDate>
      <guid>https://rikkisnah.github.io/posts/mauritius-summer-holidays-2025/</guid>
      <description>&lt;p&gt;I spent three unforgettable weeks in Mauritius during July-August 2025. This trip was special in so many ways - it was about honoring family legacy, building new opportunities, and celebrating the people who matter most.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-baptism-of-laxmi-villa---a-dream-reborn&#34;&gt;1. Baptism of Laxmi Villa - A Dream Reborn&lt;/h2&gt;&#xA;&lt;p&gt;Estelle and I completed the renovation of Laxmi Villa, the house Dad and Ma built in 1999 after I left Mauritius. The three-floor structure has always held meaning for our family:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Three Weeks in Batam: Bringing NVIDIA GB200 to Life on the Data Plane</title>
      <link>https://rikkisnah.github.io/posts/gb200-batam-data-plane-rollout/</link>
      <pubDate>Sat, 15 Mar 2025 10:00:00 -0700</pubDate>
      <guid>https://rikkisnah.github.io/posts/gb200-batam-data-plane-rollout/</guid>
      <description>&lt;p&gt;Three weeks in Batam, Indonesia in March 2025. Not a vacation - something far more meaningful. I was there to help bring the NVIDIA GB200 data plane to life, working alongside some of the brightest minds at OCI and NVIDIA. This was the moment where cutting-edge technology meets real-world infrastructure, and I got to be part of making it happen.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Related readings:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blogs.oracle.com/cloud-infrastructure/post/behind-the-scenes-nvidia-gb200-nvl72-oci-apis&#34;&gt;Behind the Scenes: NVIDIA GB200 NVL72 on OCI APIs&lt;/a&gt; - Technical deep dive on the NVIDIA GB200 and OCI integration&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blogs.oracle.com/cloud-infrastructure/post/supercluster-nvidia-blackwell-dedicated-alloy&#34;&gt;Supercluster: NVIDIA Blackwell Dedicated Alloy&lt;/a&gt; - OCI&amp;rsquo;s Supercluster offering with Blackwell GPUs&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.datacenterdynamics.com/en/news/nvidia-gb200-nvl72-now-available-via-oracle-cloud/&#34;&gt;Nvidia GB200 NVL72 Now Available via Oracle Cloud&lt;/a&gt; - Data Center Dynamics coverage of the launch&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;the-mission-time-to-market&#34;&gt;The Mission: Time to Market&lt;/h2&gt;&#xA;&lt;p&gt;When I arrived in Batam, the pressure was real. GB200 was new. NVIDIA&amp;rsquo;s latest breakthrough in GPU technology. OCI was committed to being first to market with it. And the data plane - the critical infrastructure layer that handles every packet, every connection, every byte moving through these machines - needed to be battle-ready.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Great Load Balancer Migration: Managing Three Generations</title>
      <link>https://rikkisnah.github.io/posts/aws-load-balancer-migration-2018/</link>
      <pubDate>Fri, 15 Jun 2018 09:00:00 -0700</pubDate>
      <guid>https://rikkisnah.github.io/posts/aws-load-balancer-migration-2018/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://rikkisnah.github.io/clb_alb_elb.png&#34; alt=&#34;Classic Load Balancer vs Application Load Balancer vs Network Load Balancer&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;By mid-2018, AWS had three load balancers: CLB (2009), ALB (2016), NLB (2017). Millions of customers ran each type in production. The question: how do you migrate without breaking live applications?&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;CLB users&lt;/strong&gt;: &amp;ldquo;ALB looks nice but our app works fine.&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ALB users&lt;/strong&gt;: &amp;ldquo;NLB&amp;rsquo;s latency is seductive but we don&amp;rsquo;t need it.&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Enterprise IT&lt;/strong&gt;: &amp;ldquo;Three load balancers? Pick one.&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Migrations were hard because each load balancer had different routing semantics:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Network Load Balancer: Extreme Performance for the Cloud</title>
      <link>https://rikkisnah.github.io/posts/aws-nlb-launch-2017/</link>
      <pubDate>Thu, 21 Sep 2017 09:00:00 -0700</pubDate>
      <guid>https://rikkisnah.github.io/posts/aws-nlb-launch-2017/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://rikkisnah.github.io/aws_nlb.png&#34; alt=&#34;Network Load Balancer: DNS routing with cross-zone load balancing&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;ALB solved microservices routing. NLB solved an entirely different problem: what if you need 20M requests per second at 10 microseconds of latency?&lt;/p&gt;&#xA;&lt;p&gt;Answer: don&amp;rsquo;t use ALB. ALB&amp;rsquo;s Layer 7 inspection has overhead. NLB dropped back to Layer 4 and optimized for raw speed.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-market-gap&#34;&gt;The Market Gap&lt;/h2&gt;&#xA;&lt;p&gt;By 2017, certain workloads were impossible on AWS:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;High-frequency trading&lt;/strong&gt;: Microsecond latencies matter (literally worth $1M per millisecond)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Gaming&lt;/strong&gt;: 50M concurrent sessions, sub-100ms latency required&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;DNS&lt;/strong&gt;: Billions of queries/day, must be answered in &amp;lt;50ms&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Video streaming&lt;/strong&gt;: Millions of concurrent UDP streams&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;These needed a load balancer that didn&amp;rsquo;t inspect application data—just hashed flows and forwarded packets fast.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Application Load Balancer: The Layer 7 Revolution</title>
      <link>https://rikkisnah.github.io/posts/aws-alb-launch-2016/</link>
      <pubDate>Thu, 11 Aug 2016 09:00:00 -0700</pubDate>
      <guid>https://rikkisnah.github.io/posts/aws-alb-launch-2016/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://rikkisnah.github.io/aws_alb.png&#34; alt=&#34;Setting up an Application Load Balancer with AWS EC2&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Classic Load Balancer shipped in 2009 and became a tech debt monster by 2016: 3 microservices = 3 load balancers = $150/month just for routing.&lt;/p&gt;&#xA;&lt;p&gt;ALB fixed this with Layer 7 intelligence: one load balancer could route traffic based on paths, hostnames, and HTTP headers.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;&#xA;&lt;p&gt;CLB worked fine for one big app per load balancer. But by 2016, everything was microservices:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Too Young to Die</title>
      <link>https://rikkisnah.github.io/posts/too-young-to-die/</link>
      <pubDate>Sun, 29 May 2016 00:00:00 -0700</pubDate>
      <guid>https://rikkisnah.github.io/posts/too-young-to-die/</guid>
      <description>&lt;h2 id=&#34;a-poem-for-my-brother-reflecting-on-life-family-and-the-passage-of-time&#34;&gt;A poem for my brother. Reflecting on life, family, and the passage of time.&lt;/h2&gt;&#xA;&lt;h3 id=&#34;in-remembrance&#34;&gt;In Remembrance&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/nc3k6MO_ZDI&#34;&gt;Memorial and Remembrance for Ranjiv&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;too-young-to-die&#34;&gt;Too Young to Die&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Once I was four years old, i told my mama&#xA;&amp;ldquo;Pretty woman walking down the streah haha&amp;rdquo;&#xA;Then she shouted at me and i said mama&#xA;&amp;ldquo;You ugly woman, yacking down the stream yah&amp;rdquo;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;That was then and the world was smaller&#xA;And everything was so simpler and life was gentler&#xA;My brother and I were running down the roads in Sodnac&#xA;Drinking our dad&amp;rsquo;s secret stash of cognac&lt;/p&gt;</description>
    </item>
    <item>
      <title>WorkSpaces Application Manager: Scaling Application Deployment</title>
      <link>https://rikkisnah.github.io/posts/amazon-workspaces-wam-2015/</link>
      <pubDate>Wed, 15 Apr 2015 09:00:00 -0700</pubDate>
      <guid>https://rikkisnah.github.io/posts/amazon-workspaces-wam-2015/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://rikkisnah.github.io/aws_workspaces.jpg&#34; alt=&#34;AWS Marketplace for Desktop Apps - Amazon WAM Catalog deployment&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;WorkSpaces Application Manager solved the problem we couldn&amp;rsquo;t solve with GA: how to manage Microsoft Office updates across 1M+ workspaces without downtime.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-problem-every-enterprise-customer-hit&#34;&gt;The Problem Every Enterprise Customer Hit&lt;/h2&gt;&#xA;&lt;p&gt;After a year of WorkSpaces deployments, customers had thousands of workspaces. Then:&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Scenario: Microsoft Office patch Tuesday&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Old way:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Download Office update&lt;/li&gt;&#xA;&lt;li&gt;Test on isolated machine (1 day)&lt;/li&gt;&#xA;&lt;li&gt;Rebuild golden image with new Office (4 hours)&lt;/li&gt;&#xA;&lt;li&gt;Terminate 5,000 workspaces&lt;/li&gt;&#xA;&lt;li&gt;Reprovision from new image (overnight)&lt;/li&gt;&#xA;&lt;li&gt;Users lose all desktop customizations 😡&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;Users lost a full day of productivity every month.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Amazon WorkSpaces GA: Enterprise Readiness</title>
      <link>https://rikkisnah.github.io/posts/amazon-workspaces-ga-2014/</link>
      <pubDate>Tue, 25 Mar 2014 09:00:00 -0700</pubDate>
      <guid>https://rikkisnah.github.io/posts/amazon-workspaces-ga-2014/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://rikkisnah.github.io/aws_workspaces_desktop.png&#34; alt=&#34;Amazon WorkSpaces Desktop - Cloud-based Windows workspace&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;WorkSpaces went GA when we nailed the three things enterprises absolutely required: Active Directory integration, local printing, and compliance frameworks (HIPAA/PCI).&lt;/p&gt;&#xA;&lt;h2 id=&#34;from-preview-to-production&#34;&gt;From Preview to Production&lt;/h2&gt;&#xA;&lt;p&gt;6 months of pilot feedback told us exactly what was missing:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Active Directory Integration&lt;/strong&gt;: Enterprises didn&amp;rsquo;t want to manage separate user directories. After GA, WorkSpaces synced seamlessly with on-premises AD via AWS Directory Service. Users logged in with their corp creds; IT enforced group policies across desktops.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Amazon WorkSpaces: The Birth of Desktop-as-a-Service</title>
      <link>https://rikkisnah.github.io/posts/amazon-workspaces-launch-2013/</link>
      <pubDate>Fri, 15 Nov 2013 09:00:00 -0700</pubDate>
      <guid>https://rikkisnah.github.io/posts/amazon-workspaces-launch-2013/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://rikkisnah.github.io/workspaces_desktop_as_service.png&#34; alt=&#34;Amazon WorkSpaces - Desktop as a Service&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Desktop-as-a-Service: rent a Windows desktop from AWS, get VPN-free remote work, no hardware to manage, pay per user per month.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-old-way-vs-the-new-way&#34;&gt;The Old Way vs. The New Way&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Traditional enterprise desktops:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Buy 10,000 PCs at $1,200 each = $12M upfront&lt;/li&gt;&#xA;&lt;li&gt;IT staff spends 60% of time maintaining them (disk space, updates, broken screens)&lt;/li&gt;&#xA;&lt;li&gt;Employee leaves? Reimage the machine, ship it to next employee&lt;/li&gt;&#xA;&lt;li&gt;Someone&amp;rsquo;s laptop gets stolen in the airport—full data breach&lt;/li&gt;&#xA;&lt;li&gt;Employee works remote? Jittery VPN connection, laggy screen sharing, password resets&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;WorkSpaces:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kindle Fire HDX: The High-Performance Tablet Revolution</title>
      <link>https://rikkisnah.github.io/posts/kindle-fire-hdx-2013/</link>
      <pubDate>Fri, 06 Sep 2013 10:00:00 -0700</pubDate>
      <guid>https://rikkisnah.github.io/posts/kindle-fire-hdx-2013/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://rikkisnah.github.io/kindle_fire_hdx_2013.jpg&#34; alt=&#34;Kindle Fire HDX 2013&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Mayday Button + 339ppi display + Snapdragon S4 = Fire HD customers willing to spend $50–100 more for a tablet that actually felt premium.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-problem-with-fire-hd-v1&#34;&gt;The Problem with Fire HD v1&lt;/h2&gt;&#xA;&lt;p&gt;Fire HD was cheap, but it &lt;em&gt;felt&lt;/em&gt; cheap. Sluggish scrolling in Kindle. Games stuttered. The 7-inch screen had visible pixels. And when users hit problems? They called customer service, waited on hold, and gave up.&lt;/p&gt;&#xA;&lt;p&gt;HDX solved all three: better hardware, prettier screen, and &lt;em&gt;a live person&lt;/em&gt; via video within 10 seconds.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kindle Fire HD: Amazon&#39;s Tablet Strategy</title>
      <link>https://rikkisnah.github.io/posts/kindle-fire-hd-2012/</link>
      <pubDate>Thu, 06 Sep 2012 10:00:00 -0700</pubDate>
      <guid>https://rikkisnah.github.io/posts/kindle-fire-hd-2012/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://rikkisnah.github.io/kindle_fire_hd_2012.jpg&#34; alt=&#34;Kindle Fire HD 2012&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Amazon&amp;rsquo;s $299 tablet undercut iPad by $200 and owned content delivery, shipping 3M+ units in year one despite iOS app dominance.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-strategy&#34;&gt;The Strategy&lt;/h2&gt;&#xA;&lt;p&gt;iPad was for content &lt;em&gt;creation&lt;/em&gt;. Fire HD was for content &lt;em&gt;consumption.&lt;/em&gt; We didn&amp;rsquo;t try to beat Apple at raw performance; we built a tablet for Prime members. Want to stream a movie, read a book, buy physical goods, and have it all sync? That&amp;rsquo;s Fire HD.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kindle Paperwhite: The Game Changer</title>
      <link>https://rikkisnah.github.io/posts/kindle-paperwhite-2012/</link>
      <pubDate>Thu, 06 Sep 2012 09:00:00 -0700</pubDate>
      <guid>https://rikkisnah.github.io/posts/kindle-paperwhite-2012/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://rikkisnah.github.io/kindle_paperwhite_2012.jpg&#34; alt=&#34;Kindle Paperwhite 2012&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Front-lit e-ink solved the #1 Kindle complaint in one product, driving 50M+ units shipped and establishing Paperwhite as the flagship.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;&#xA;&lt;p&gt;Readers couldn&amp;rsquo;t use Kindles in bed without a book light. Period. That friction, stacked across millions of commuters and travelers, represented the biggest gap between e-readers and physical books. Amazon had shipped 3+ generations of Kindles; every survey said the same thing: &lt;em&gt;light.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-we-built-it&#34;&gt;How We Built It&lt;/h2&gt;&#xA;&lt;p&gt;Traditional backlit screens bleed light unevenly and drain batteries. Amazon&amp;rsquo;s engineers (working with Pearl Ink and Teradici&amp;rsquo;s optics team) built a light guide layer that distributes LED light uniformly across the entire e-ink surface—no edge glare, no hot spots.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Motorola ROKR E1 - Music Phone Baseline for Future Innovation</title>
      <link>https://rikkisnah.github.io/posts/motorola-rokr-e1-2005/</link>
      <pubDate>Wed, 07 Sep 2005 00:00:00 +0800</pubDate>
      <guid>https://rikkisnah.github.io/posts/motorola-rokr-e1-2005/</guid>
      <description>&lt;h2 id=&#34;the-first-itunes-phone---a-missed-opportunity-in-hindsight---2005&#34;&gt;The First iTunes Phone - A Missed Opportunity in Hindsight - 2005&lt;/h2&gt;&#xA;&lt;p&gt;Working at Motorola&amp;rsquo;s Design Center in Singapore (Ang Mo Kio), I had the opportunity to contribute to the &lt;strong&gt;Motorola ROKR E1&lt;/strong&gt;, Motorola&amp;rsquo;s first phone with iTunes integration. This was a significant moment in mobile history—though we didn&amp;rsquo;t realize at the time how much it would define the path forward.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://rikkisnah.github.io/rokr.png&#34; alt=&#34;Motorola ROKR E1&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;the-phone-a-vision-of-music-integration&#34;&gt;The Phone: A Vision of Music Integration&lt;/h3&gt;&#xA;&lt;p&gt;The ROKR E1, launched in 2005, was positioned as the answer to bringing iTunes to mobile phones:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Motorola RAZR V3 - The Phone That Defined a Generation</title>
      <link>https://rikkisnah.github.io/posts/motorola-razr-v3-2004/</link>
      <pubDate>Thu, 09 Sep 2004 00:00:00 +0800</pubDate>
      <guid>https://rikkisnah.github.io/posts/motorola-razr-v3-2004/</guid>
      <description>&lt;h2 id=&#34;a-design-icon-reshapes-mobile-phone-industry---2004&#34;&gt;A Design Icon Reshapes Mobile Phone Industry - 2004&lt;/h2&gt;&#xA;&lt;p&gt;Working at Motorola&amp;rsquo;s Design Center in Singapore (Ang Mo Kio), I had the privilege to be part of the team that brought the &lt;strong&gt;Motorola RAZR V3&lt;/strong&gt; to life. This wasn&amp;rsquo;t just another phone—it was a cultural phenomenon that redefined what people expected from mobile devices.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://rikkisnah.github.io/razr.png&#34; alt=&#34;Motorola RAZR V3&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;the-revolutionary-phone&#34;&gt;The Revolutionary Phone&lt;/h3&gt;&#xA;&lt;p&gt;The RAZR V3 launched in 2004 and became an icon:&lt;/p&gt;</description>
    </item>
    <item>
      <title>iPod Integration Journey: From Dream to Modular Architecture</title>
      <link>https://rikkisnah.github.io/posts/ipod-integration-journey-2002-2003/</link>
      <pubDate>Wed, 09 Jul 2003 00:00:00 +0000</pubDate>
      <guid>https://rikkisnah.github.io/posts/ipod-integration-journey-2002-2003/</guid>
      <description>&lt;h2 id=&#34;the-dream-phone-as-music-player&#34;&gt;The Dream: Phone as Music Player&lt;/h2&gt;&#xA;&lt;p&gt;iPod shipped May 2001. By May 2002, it was already a phenomenon. At Motorola Design Center Singapore, we asked: what if your phone &lt;em&gt;was&lt;/em&gt; the iPod?&lt;/p&gt;&#xA;&lt;p&gt;Not &amp;ldquo;what if your phone had an MP3 player.&amp;rdquo; But: what if the form factor, the UX, the simplicity—all of it could live in a Motorola handset?&lt;/p&gt;&#xA;&lt;p&gt;Over 15 months, I learned that modular architecture beats monolithic design every time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Motorola V70 (Pebble) - Design Center Singapore</title>
      <link>https://rikkisnah.github.io/posts/motorola-v70-pebble-2003/</link>
      <pubDate>Sun, 15 Jun 2003 00:00:00 +0800</pubDate>
      <guid>https://rikkisnah.github.io/posts/motorola-v70-pebble-2003/</guid>
      <description>&lt;h2 id=&#34;a-rugged-candybar-phone---2003&#34;&gt;A Rugged Candybar Phone - 2003&lt;/h2&gt;&#xA;&lt;p&gt;Working at Motorola&amp;rsquo;s Design Center in Singapore (Ang Mo Kio), I had the opportunity to work on the &lt;strong&gt;Motorola V70&lt;/strong&gt;, codenamed &amp;ldquo;Pebble&amp;rdquo; during development. This was one of Motorola&amp;rsquo;s rugged, business-focused candybar phones designed for durability and reliability.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://rikkisnah.github.io/pebble.png&#34; alt=&#34;Motorola V70 Pebble&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;the-phone&#34;&gt;The Phone&lt;/h3&gt;&#xA;&lt;p&gt;The V70 was positioned as a tough, weatherproof alternative to sleeker models. It featured:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ruggedized design built to withstand drops and environmental stress&lt;/li&gt;&#xA;&lt;li&gt;Compact candybar form factor&lt;/li&gt;&#xA;&lt;li&gt;Focus on durability and long battery life&lt;/li&gt;&#xA;&lt;li&gt;Business-oriented feature set&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;my-role---testing-qa--embedded-systems&#34;&gt;My Role - Testing, QA &amp;amp; Embedded Systems&lt;/h3&gt;&#xA;&lt;p&gt;At the Design Center in Singapore, my work on the V70 involved:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bluetooth Prototypes: From Experimental to Production</title>
      <link>https://rikkisnah.github.io/posts/bluetooth-prototypes-journey-2002-2003/</link>
      <pubDate>Tue, 11 Mar 2003 00:00:00 +0000</pubDate>
      <guid>https://rikkisnah.github.io/posts/bluetooth-prototypes-journey-2002-2003/</guid>
      <description>&lt;h2 id=&#34;wireless-phones-2002&#34;&gt;Wireless Phones (2002)&lt;/h2&gt;&#xA;&lt;p&gt;Bluetooth standard existed since 1998. By 2002, nobody had actually shipped it in a phone. At Motorola, we saw the real opportunity: wireless headphones. No more headset cords tangled in your pocket.&lt;/p&gt;&#xA;&lt;p&gt;But standards look clean on paper. In reality? Manufacturers interpreted the spec differently. Pairing was flaky. Range was spotty. We spent months debugging why Bluetooth worked 70% of the time instead of 100%.&lt;/p&gt;&#xA;&lt;p&gt;We&amp;rsquo;d get two devices talking, then change something in our protocol stack, and suddenly they wouldn&amp;rsquo;t. We&amp;rsquo;d spend days debugging, only to discover the issue was a misunderstanding of the specification&amp;rsquo;s wording.&lt;/p&gt;</description>
    </item>
    <item>
      <title>3G Rollout: The Future of Mobile Communication</title>
      <link>https://rikkisnah.github.io/posts/3g-rollout-thrills/</link>
      <pubDate>Thu, 14 Feb 2002 00:00:00 +0000</pubDate>
      <guid>https://rikkisnah.github.io/posts/3g-rollout-thrills/</guid>
      <description>&lt;h2 id=&#34;moving-to-motorola&#34;&gt;Moving to Motorola&lt;/h2&gt;&#xA;&lt;p&gt;In 2002, I left academia and joined Motorola Mobile Devices. The timing was perfect. Motorola was at the center of the 3G revolution—the transition from 2G networks (which enabled SMS and basic data) to 3G networks (which promised high-speed data and multimedia).&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-3g-vision&#34;&gt;The 3G Vision&lt;/h2&gt;&#xA;&lt;p&gt;The promise was intoxicating. Imagine a mobile phone that could stream video, enable real-time applications, support navigation and location services. 3G would deliver megabits per second instead of kilobits. This wasn&amp;rsquo;t just an incremental upgrade; it was a paradigm shift.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Y2K Debugging Journey: From Crisis to Lessons Learned</title>
      <link>https://rikkisnah.github.io/posts/y2k-debugging-journey-1999-2001/</link>
      <pubDate>Thu, 20 Dec 2001 00:00:00 +0000</pubDate>
      <guid>https://rikkisnah.github.io/posts/y2k-debugging-journey-1999-2001/</guid>
      <description>&lt;h2 id=&#34;the-crisis-that-never-was-1999-2000&#34;&gt;The Crisis That Never Was (1999-2000)&lt;/h2&gt;&#xA;&lt;p&gt;Summer 1999: The world was panicked. Every computer system would crash at midnight on Dec 31, 1999 because programmers in the 1970s had stored years as 2-digit numbers. 99 rolled to 00, and—disaster.&lt;/p&gt;&#xA;&lt;p&gt;At NTU, we treated it seriously. Every system we touched had the same problem: years stored as &lt;code&gt;YY&lt;/code&gt; instead of &lt;code&gt;YYYY&lt;/code&gt;. The fix was mechanical but tedious: find every date field, add validation, test like hell.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Early Linux at NTU: Open Source Becomes Real</title>
      <link>https://rikkisnah.github.io/posts/early-linux-at-ntu/</link>
      <pubDate>Mon, 17 Sep 2001 00:00:00 +0000</pubDate>
      <guid>https://rikkisnah.github.io/posts/early-linux-at-ntu/</guid>
      <description>&lt;h2 id=&#34;the-linux-revolution-reaches-ntu&#34;&gt;The Linux Revolution Reaches NTU&lt;/h2&gt;&#xA;&lt;p&gt;By September 2001, Linux was transitioning from hobbyist project to legitimate alternative to proprietary Unix systems. NTU, as a forward-thinking institution, started deploying Linux in labs. After years of expensive proprietary systems, here was an free, open operating system that actually worked.&lt;/p&gt;&#xA;&lt;p&gt;For students raised on Windows, encountering Linux was revelatory. The source code was available. You could modify it. You could understand how everything worked down to the kernel level.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Applets Journey: Write Once, Run Anywhere?</title>
      <link>https://rikkisnah.github.io/posts/java-applets-journey-2000/</link>
      <pubDate>Tue, 21 Nov 2000 00:00:00 +0000</pubDate>
      <guid>https://rikkisnah.github.io/posts/java-applets-journey-2000/</guid>
      <description>&lt;h2 id=&#34;write-once-run-anywhere-2000&#34;&gt;&amp;ldquo;Write Once, Run Anywhere&amp;rdquo; (2000)&lt;/h2&gt;&#xA;&lt;p&gt;Java shipped 1995. By 2000, Sun was convinced: Java applets would replace native applications. Download an applet from a website, it runs in your browser on any OS. Windows, Mac, Linux—same code everywhere.&lt;/p&gt;&#xA;&lt;p&gt;At NTU, every CS class assignment involved Java. The promise was seductive. But reality was brutal: applets were slow (multi-MB downloads!), full of security bugs, and incompatible across browsers. Try to download a file? Permission denied. Try to use a system library? ClassNotFoundExceptions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wi-Fi Experiments: From Lab to Campus Networks</title>
      <link>https://rikkisnah.github.io/posts/wifi-experiments-journey-1999-2000/</link>
      <pubDate>Thu, 25 May 2000 00:00:00 +0000</pubDate>
      <guid>https://rikkisnah.github.io/posts/wifi-experiments-journey-1999-2000/</guid>
      <description>&lt;h2 id=&#34;wireless-networking-1999&#34;&gt;Wireless Networking (1999)&lt;/h2&gt;&#xA;&lt;p&gt;IEEE 802.11 shipped in 1997. By 1999, Singapore was ahead of the curve—early 802.11b trials at universities. At NTU, we had access to experimental wireless infrastructure. The dream: no wires. Just laptops talking over the air.&lt;/p&gt;&#xA;&lt;p&gt;Reality: signal was weak, interference constant, range 20 meters on a good day. Tropical humidity killed performance. Water vapor absorbs radio waves. Our tests worked in the lab, then failed in the hallway.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Matrix Neural Net Dreams: Reflections on Early AI</title>
      <link>https://rikkisnah.github.io/posts/matrix-neural-net-dreams/</link>
      <pubDate>Sat, 01 May 1999 00:00:00 +0000</pubDate>
      <guid>https://rikkisnah.github.io/posts/matrix-neural-net-dreams/</guid>
      <description>&lt;h2 id=&#34;machine-learning-before-it-was-cool-1999&#34;&gt;Machine Learning Before It Was Cool (1999)&lt;/h2&gt;&#xA;&lt;p&gt;While everyone worried about Y2K, I was playing with neural networks at NTU. Not because I thought they&amp;rsquo;d ship in products—they were academic curiosities then. But because the math was beautiful.&lt;/p&gt;&#xA;&lt;p&gt;The core insight: if you could represent a problem as matrices, you could teach a network to solve it via backpropagation. Weights → matrix multiply → gradient descent → improved weights. Repeat until convergence.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
